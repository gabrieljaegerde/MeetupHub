var A="",B=A;export{B as default};
